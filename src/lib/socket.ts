import { Server } from 'socket.io';
import { Server as HttpServer } from 'http';

export function setupSocket(server: HttpServer) {
  const io = new Server(server, {
    cors: {
      origin: process.env.NODE_ENV === 'production' 
        ? false 
        : ["http://localhost:3000", "http://127.0.0.1:3000"],
      methods: ["GET", "POST"],
      credentials: true
    },
    path: '/api/socketio'
  });

  io.on('connection', (socket) => {
    console.log('๐ ุนููู ูุชุตู:', socket.id);

    // ุฑุฏ ุนูู ping ููุชุฃูุฏ ูู ุงูุงุชุตุงู
    socket.on('ping', () => {
      socket.emit('pong');
    });

    // ูุนุงูุฌ ูุทุน ุงูุงุชุตุงู
    socket.on('disconnect', (reason) => {
      console.log('โ ุนููู ูููุทุน:', socket.id, 'ุงูุณุจุจ:', reason);
    });

    // ูููู ุฅุถุงูุฉ ุฃุญุฏุงุซ ุฃุฎุฑู ููุง ุญุณุจ ุงูุญุงุฌุฉ
    socket.on('join-room', (room: string) => {
      socket.join(room);
      console.log(`๐ฅ ุงูุนููู ${socket.id} ุงูุถู ููุบุฑูุฉ: ${room}`);
    });

    socket.on('leave-room', (room: string) => {
      socket.leave(room);
      console.log(`๐ ุงูุนููู ${socket.id} ุบุงุฏุฑ ุงูุบุฑูุฉ: ${room}`);
    });
  });

  // ุฅุฑุฌุงุน ูุซูู Socket.IO ููุงุณุชุฎุฏุงู ูู ุฃูุงูู ุฃุฎุฑู
  return io;
}

export type SocketIOServer = ReturnType<typeof setupSocket>;
